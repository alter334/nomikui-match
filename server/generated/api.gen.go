// Package echo provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package echo

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Area defines model for Area.
type Area struct {
	Areaname string              `json:"areaname"`
	Id       *openapi_types.UUID `json:"id,omitempty"`
}

// Entry defines model for Entry.
type Entry struct {
	EntriedAt time.Time          `json:"entried_at"`
	Ispresent bool               `json:"ispresent"`
	Nomikuiid openapi_types.UUID `json:"nomikuiid"`
	Userid    openapi_types.UUID `json:"userid"`
}

// Genre defines model for Genre.
type Genre struct {
	Genrename string              `json:"genrename"`
	Id        *openapi_types.UUID `json:"id,omitempty"`
}

// Nomikui defines model for Nomikui.
type Nomikui struct {
	Comment      *string             `json:"comment,omitempty"`
	ConductedAt  time.Time           `json:"conducted_at"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Isopen       bool                `json:"isopen"`
	Organizerid  openapi_types.UUID  `json:"organizerid"`
	Picture      *string             `json:"picture,omitempty"`
	Restaurantid openapi_types.UUID  `json:"restaurantid"`
}

// Restaurant defines model for Restaurant.
type Restaurant struct {
	Areaid       *openapi_types.UUID `json:"areaid,omitempty"`
	Comment      *string             `json:"comment,omitempty"`
	Genreid      *openapi_types.UUID `json:"genreid,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Name         string              `json:"name"`
	Picture      *string             `json:"picture,omitempty"`
	RegisteredAt time.Time           `json:"registered_at"`
}

// Tag defines model for Tag.
type Tag struct {
	Content      string              `json:"content"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	Restaurantid openapi_types.UUID  `json:"restaurantid"`
}

// User defines model for User.
type User struct {
	Id     *openapi_types.UUID `json:"id,omitempty"`
	Name   string              `json:"name"`
	TraQid *string             `json:"traQid,omitempty"`
}

// DeleteUsersUseridFavoriteParams defines parameters for DeleteUsersUseridFavorite.
type DeleteUsersUseridFavoriteParams struct {
	// Restaurantid 消去対象の店id
	Restaurantid *openapi_types.UUID `form:"restaurantid,omitempty" json:"restaurantid,omitempty"`
}

// PostUsersUseridFavoriteParams defines parameters for PostUsersUseridFavorite.
type PostUsersUseridFavoriteParams struct {
	// Restaurantid 追加対象の店id
	Restaurantid openapi_types.UUID `form:"restaurantid" json:"restaurantid"`
}

// PostAreasJSONRequestBody defines body for PostAreas for application/json ContentType.
type PostAreasJSONRequestBody = Area

// PatchAreasAreaidJSONRequestBody defines body for PatchAreasAreaid for application/json ContentType.
type PatchAreasAreaidJSONRequestBody = Area

// PostEntriesJSONRequestBody defines body for PostEntries for application/json ContentType.
type PostEntriesJSONRequestBody = Entry

// PatchEntriesEntryidJSONRequestBody defines body for PatchEntriesEntryid for application/json ContentType.
type PatchEntriesEntryidJSONRequestBody = Entry

// PostGenresJSONRequestBody defines body for PostGenres for application/json ContentType.
type PostGenresJSONRequestBody = Genre

// PatchGenresGenreidJSONRequestBody defines body for PatchGenresGenreid for application/json ContentType.
type PatchGenresGenreidJSONRequestBody = Genre

// PostNomikuiJSONRequestBody defines body for PostNomikui for application/json ContentType.
type PostNomikuiJSONRequestBody = Nomikui

// PatchNomikuiNomikuiidJSONRequestBody defines body for PatchNomikuiNomikuiid for application/json ContentType.
type PatchNomikuiNomikuiidJSONRequestBody = Nomikui

// PostRestaurantsJSONRequestBody defines body for PostRestaurants for application/json ContentType.
type PostRestaurantsJSONRequestBody = Restaurant

// PatchRestaurantsRestaurantidJSONRequestBody defines body for PatchRestaurantsRestaurantid for application/json ContentType.
type PatchRestaurantsRestaurantidJSONRequestBody = Restaurant

// PostTagsJSONRequestBody defines body for PostTags for application/json ContentType.
type PostTagsJSONRequestBody = Tag

// PatchTagsTagidJSONRequestBody defines body for PatchTagsTagid for application/json ContentType.
type PatchTagsTagidJSONRequestBody = Tag

// PostUsersJSONRequestBody defines body for PostUsers for application/json ContentType.
type PostUsersJSONRequestBody = User

// PatchUsersUseridJSONRequestBody defines body for PatchUsersUserid for application/json ContentType.
type PatchUsersUseridJSONRequestBody = User

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAreas request
	GetAreas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAreasWithBody request with any body
	PostAreasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAreas(ctx context.Context, body PostAreasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAreasAreaid request
	DeleteAreasAreaid(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAreasAreaid request
	GetAreasAreaid(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchAreasAreaidWithBody request with any body
	PatchAreasAreaidWithBody(ctx context.Context, areaid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchAreasAreaid(ctx context.Context, areaid openapi_types.UUID, body PatchAreasAreaidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntries request
	GetEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostEntriesWithBody request with any body
	PostEntriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostEntries(ctx context.Context, body PostEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEntriesEntryid request
	DeleteEntriesEntryid(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEntriesEntryid request
	GetEntriesEntryid(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchEntriesEntryidWithBody request with any body
	PatchEntriesEntryidWithBody(ctx context.Context, entryid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchEntriesEntryid(ctx context.Context, entryid openapi_types.UUID, body PatchEntriesEntryidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenres request
	GetGenres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGenresWithBody request with any body
	PostGenresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGenres(ctx context.Context, body PostGenresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGenresGenreid request
	DeleteGenresGenreid(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGenresGenreid request
	GetGenresGenreid(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchGenresGenreidWithBody request with any body
	PatchGenresGenreidWithBody(ctx context.Context, genreid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchGenresGenreid(ctx context.Context, genreid openapi_types.UUID, body PatchGenresGenreidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNomikui request
	GetNomikui(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNomikuiWithBody request with any body
	PostNomikuiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNomikui(ctx context.Context, body PostNomikuiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNomikuiNomikuiid request
	DeleteNomikuiNomikuiid(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNomikuiNomikuiid request
	GetNomikuiNomikuiid(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchNomikuiNomikuiidWithBody request with any body
	PatchNomikuiNomikuiidWithBody(ctx context.Context, nomikuiid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchNomikuiNomikuiid(ctx context.Context, nomikuiid openapi_types.UUID, body PatchNomikuiNomikuiidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPing request
	GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRestaurants request
	GetRestaurants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRestaurantsWithBody request with any body
	PostRestaurantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRestaurants(ctx context.Context, body PostRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRestaurantsRestaurantid request
	DeleteRestaurantsRestaurantid(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRestaurantsRestaurantid request
	GetRestaurantsRestaurantid(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchRestaurantsRestaurantidWithBody request with any body
	PatchRestaurantsRestaurantidWithBody(ctx context.Context, restaurantid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchRestaurantsRestaurantid(ctx context.Context, restaurantid openapi_types.UUID, body PatchRestaurantsRestaurantidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTags request
	GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTagsWithBody request with any body
	PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTagsTagid request
	DeleteTagsTagid(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagid request
	GetTagsTagid(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchTagsTagidWithBody request with any body
	PatchTagsTagidWithBody(ctx context.Context, tagid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchTagsTagid(ctx context.Context, tagid openapi_types.UUID, body PatchTagsTagidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsers request
	GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersWithBody request with any body
	PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersUserid request
	DeleteUsersUserid(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUserid request
	GetUsersUserid(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchUsersUseridWithBody request with any body
	PatchUsersUseridWithBody(ctx context.Context, userid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchUsersUserid(ctx context.Context, userid openapi_types.UUID, body PatchUsersUseridJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsersUseridFavorite request
	DeleteUsersUseridFavorite(ctx context.Context, userid openapi_types.UUID, params *DeleteUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersUseridFavorite request
	GetUsersUseridFavorite(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUsersUseridFavorite request
	PostUsersUseridFavorite(ctx context.Context, userid openapi_types.UUID, params *PostUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAreas(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAreasRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAreasWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAreasRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAreas(ctx context.Context, body PostAreasJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAreasRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAreasAreaid(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAreasAreaidRequest(c.Server, areaid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAreasAreaid(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAreasAreaidRequest(c.Server, areaid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAreasAreaidWithBody(ctx context.Context, areaid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAreasAreaidRequestWithBody(c.Server, areaid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchAreasAreaid(ctx context.Context, areaid openapi_types.UUID, body PatchAreasAreaidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchAreasAreaidRequest(c.Server, areaid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntries(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEntriesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEntriesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostEntries(ctx context.Context, body PostEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostEntriesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEntriesEntryid(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEntriesEntryidRequest(c.Server, entryid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEntriesEntryid(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEntriesEntryidRequest(c.Server, entryid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEntriesEntryidWithBody(ctx context.Context, entryid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEntriesEntryidRequestWithBody(c.Server, entryid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchEntriesEntryid(ctx context.Context, entryid openapi_types.UUID, body PatchEntriesEntryidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchEntriesEntryidRequest(c.Server, entryid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenres(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenresRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGenresWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGenresRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGenres(ctx context.Context, body PostGenresJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGenresRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGenresGenreid(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGenresGenreidRequest(c.Server, genreid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGenresGenreid(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGenresGenreidRequest(c.Server, genreid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGenresGenreidWithBody(ctx context.Context, genreid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGenresGenreidRequestWithBody(c.Server, genreid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchGenresGenreid(ctx context.Context, genreid openapi_types.UUID, body PatchGenresGenreidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchGenresGenreidRequest(c.Server, genreid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNomikui(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNomikuiRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNomikuiWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNomikuiRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNomikui(ctx context.Context, body PostNomikuiJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNomikuiRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNomikuiNomikuiid(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNomikuiNomikuiidRequest(c.Server, nomikuiid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNomikuiNomikuiid(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNomikuiNomikuiidRequest(c.Server, nomikuiid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchNomikuiNomikuiidWithBody(ctx context.Context, nomikuiid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchNomikuiNomikuiidRequestWithBody(c.Server, nomikuiid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchNomikuiNomikuiid(ctx context.Context, nomikuiid openapi_types.UUID, body PatchNomikuiNomikuiidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchNomikuiNomikuiidRequest(c.Server, nomikuiid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPing(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPingRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRestaurants(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestaurantsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestaurantsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRestaurants(ctx context.Context, body PostRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRestaurantsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRestaurantsRestaurantid(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRestaurantsRestaurantidRequest(c.Server, restaurantid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRestaurantsRestaurantid(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRestaurantsRestaurantidRequest(c.Server, restaurantid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRestaurantsRestaurantidWithBody(ctx context.Context, restaurantid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRestaurantsRestaurantidRequestWithBody(c.Server, restaurantid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchRestaurantsRestaurantid(ctx context.Context, restaurantid openapi_types.UUID, body PatchRestaurantsRestaurantidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchRestaurantsRestaurantidRequest(c.Server, restaurantid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTags(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTagsTagid(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTagsTagidRequest(c.Server, tagid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagid(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagidRequest(c.Server, tagid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagidWithBody(ctx context.Context, tagid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagidRequestWithBody(c.Server, tagid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchTagsTagid(ctx context.Context, tagid openapi_types.UUID, body PatchTagsTagidJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchTagsTagidRequest(c.Server, tagid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsers(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUserid(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUseridRequest(c.Server, userid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUserid(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUseridRequest(c.Server, userid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersUseridWithBody(ctx context.Context, userid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersUseridRequestWithBody(c.Server, userid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchUsersUserid(ctx context.Context, userid openapi_types.UUID, body PatchUsersUseridJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchUsersUseridRequest(c.Server, userid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsersUseridFavorite(ctx context.Context, userid openapi_types.UUID, params *DeleteUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsersUseridFavoriteRequest(c.Server, userid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersUseridFavorite(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersUseridFavoriteRequest(c.Server, userid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUsersUseridFavorite(ctx context.Context, userid openapi_types.UUID, params *PostUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUsersUseridFavoriteRequest(c.Server, userid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAreasRequest generates requests for GetAreas
func NewGetAreasRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/areas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAreasRequest calls the generic PostAreas builder with application/json body
func NewPostAreasRequest(server string, body PostAreasJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAreasRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAreasRequestWithBody generates requests for PostAreas with any type of body
func NewPostAreasRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/areas")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAreasAreaidRequest generates requests for DeleteAreasAreaid
func NewDeleteAreasAreaidRequest(server string, areaid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "areaid", runtime.ParamLocationPath, areaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/areas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAreasAreaidRequest generates requests for GetAreasAreaid
func NewGetAreasAreaidRequest(server string, areaid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "areaid", runtime.ParamLocationPath, areaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/areas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchAreasAreaidRequest calls the generic PatchAreasAreaid builder with application/json body
func NewPatchAreasAreaidRequest(server string, areaid openapi_types.UUID, body PatchAreasAreaidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchAreasAreaidRequestWithBody(server, areaid, "application/json", bodyReader)
}

// NewPatchAreasAreaidRequestWithBody generates requests for PatchAreasAreaid with any type of body
func NewPatchAreasAreaidRequestWithBody(server string, areaid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "areaid", runtime.ParamLocationPath, areaid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/areas/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEntriesRequest generates requests for GetEntries
func NewGetEntriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostEntriesRequest calls the generic PostEntries builder with application/json body
func NewPostEntriesRequest(server string, body PostEntriesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostEntriesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostEntriesRequestWithBody generates requests for PostEntries with any type of body
func NewPostEntriesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/entries")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEntriesEntryidRequest generates requests for DeleteEntriesEntryid
func NewDeleteEntriesEntryidRequest(server string, entryid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryid", runtime.ParamLocationPath, entryid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEntriesEntryidRequest generates requests for GetEntriesEntryid
func NewGetEntriesEntryidRequest(server string, entryid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryid", runtime.ParamLocationPath, entryid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchEntriesEntryidRequest calls the generic PatchEntriesEntryid builder with application/json body
func NewPatchEntriesEntryidRequest(server string, entryid openapi_types.UUID, body PatchEntriesEntryidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchEntriesEntryidRequestWithBody(server, entryid, "application/json", bodyReader)
}

// NewPatchEntriesEntryidRequestWithBody generates requests for PatchEntriesEntryid with any type of body
func NewPatchEntriesEntryidRequestWithBody(server string, entryid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "entryid", runtime.ParamLocationPath, entryid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/entries/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetGenresRequest generates requests for GetGenres
func NewGetGenresRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genres")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGenresRequest calls the generic PostGenres builder with application/json body
func NewPostGenresRequest(server string, body PostGenresJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGenresRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGenresRequestWithBody generates requests for PostGenres with any type of body
func NewPostGenresRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genres")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGenresGenreidRequest generates requests for DeleteGenresGenreid
func NewDeleteGenresGenreidRequest(server string, genreid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "genreid", runtime.ParamLocationPath, genreid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGenresGenreidRequest generates requests for GetGenresGenreid
func NewGetGenresGenreidRequest(server string, genreid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "genreid", runtime.ParamLocationPath, genreid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchGenresGenreidRequest calls the generic PatchGenresGenreid builder with application/json body
func NewPatchGenresGenreidRequest(server string, genreid openapi_types.UUID, body PatchGenresGenreidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchGenresGenreidRequestWithBody(server, genreid, "application/json", bodyReader)
}

// NewPatchGenresGenreidRequestWithBody generates requests for PatchGenresGenreid with any type of body
func NewPatchGenresGenreidRequestWithBody(server string, genreid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "genreid", runtime.ParamLocationPath, genreid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/genres/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNomikuiRequest generates requests for GetNomikui
func NewGetNomikuiRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nomikui")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNomikuiRequest calls the generic PostNomikui builder with application/json body
func NewPostNomikuiRequest(server string, body PostNomikuiJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNomikuiRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNomikuiRequestWithBody generates requests for PostNomikui with any type of body
func NewPostNomikuiRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nomikui")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNomikuiNomikuiidRequest generates requests for DeleteNomikuiNomikuiid
func NewDeleteNomikuiNomikuiidRequest(server string, nomikuiid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nomikuiid", runtime.ParamLocationPath, nomikuiid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nomikui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNomikuiNomikuiidRequest generates requests for GetNomikuiNomikuiid
func NewGetNomikuiNomikuiidRequest(server string, nomikuiid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nomikuiid", runtime.ParamLocationPath, nomikuiid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nomikui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchNomikuiNomikuiidRequest calls the generic PatchNomikuiNomikuiid builder with application/json body
func NewPatchNomikuiNomikuiidRequest(server string, nomikuiid openapi_types.UUID, body PatchNomikuiNomikuiidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchNomikuiNomikuiidRequestWithBody(server, nomikuiid, "application/json", bodyReader)
}

// NewPatchNomikuiNomikuiidRequestWithBody generates requests for PatchNomikuiNomikuiid with any type of body
func NewPatchNomikuiNomikuiidRequestWithBody(server string, nomikuiid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "nomikuiid", runtime.ParamLocationPath, nomikuiid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nomikui/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPingRequest generates requests for GetPing
func NewGetPingRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ping")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRestaurantsRequest generates requests for GetRestaurants
func NewGetRestaurantsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRestaurantsRequest calls the generic PostRestaurants builder with application/json body
func NewPostRestaurantsRequest(server string, body PostRestaurantsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRestaurantsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRestaurantsRequestWithBody generates requests for PostRestaurants with any type of body
func NewPostRestaurantsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRestaurantsRestaurantidRequest generates requests for DeleteRestaurantsRestaurantid
func NewDeleteRestaurantsRestaurantidRequest(server string, restaurantid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurantid", runtime.ParamLocationPath, restaurantid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRestaurantsRestaurantidRequest generates requests for GetRestaurantsRestaurantid
func NewGetRestaurantsRestaurantidRequest(server string, restaurantid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurantid", runtime.ParamLocationPath, restaurantid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchRestaurantsRestaurantidRequest calls the generic PatchRestaurantsRestaurantid builder with application/json body
func NewPatchRestaurantsRestaurantidRequest(server string, restaurantid openapi_types.UUID, body PatchRestaurantsRestaurantidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchRestaurantsRestaurantidRequestWithBody(server, restaurantid, "application/json", bodyReader)
}

// NewPatchRestaurantsRestaurantidRequestWithBody generates requests for PatchRestaurantsRestaurantid with any type of body
func NewPatchRestaurantsRestaurantidRequestWithBody(server string, restaurantid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "restaurantid", runtime.ParamLocationPath, restaurantid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/restaurants/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTagsRequest generates requests for GetTags
func NewGetTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTagsRequest calls the generic PostTags builder with application/json body
func NewPostTagsRequest(server string, body PostTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTagsRequestWithBody generates requests for PostTags with any type of body
func NewPostTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTagsTagidRequest generates requests for DeleteTagsTagid
func NewDeleteTagsTagidRequest(server string, tagid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagid", runtime.ParamLocationPath, tagid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsTagidRequest generates requests for GetTagsTagid
func NewGetTagsTagidRequest(server string, tagid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagid", runtime.ParamLocationPath, tagid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchTagsTagidRequest calls the generic PatchTagsTagid builder with application/json body
func NewPatchTagsTagidRequest(server string, tagid openapi_types.UUID, body PatchTagsTagidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchTagsTagidRequestWithBody(server, tagid, "application/json", bodyReader)
}

// NewPatchTagsTagidRequestWithBody generates requests for PatchTagsTagid with any type of body
func NewPatchTagsTagidRequestWithBody(server string, tagid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagid", runtime.ParamLocationPath, tagid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUsersRequest generates requests for GetUsers
func NewGetUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersRequest calls the generic PostUsers builder with application/json body
func NewPostUsersRequest(server string, body PostUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUsersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostUsersRequestWithBody generates requests for PostUsers with any type of body
func NewPostUsersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersUseridRequest generates requests for DeleteUsersUserid
func NewDeleteUsersUseridRequest(server string, userid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userid", runtime.ParamLocationPath, userid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUseridRequest generates requests for GetUsersUserid
func NewGetUsersUseridRequest(server string, userid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userid", runtime.ParamLocationPath, userid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchUsersUseridRequest calls the generic PatchUsersUserid builder with application/json body
func NewPatchUsersUseridRequest(server string, userid openapi_types.UUID, body PatchUsersUseridJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchUsersUseridRequestWithBody(server, userid, "application/json", bodyReader)
}

// NewPatchUsersUseridRequestWithBody generates requests for PatchUsersUserid with any type of body
func NewPatchUsersUseridRequestWithBody(server string, userid openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userid", runtime.ParamLocationPath, userid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsersUseridFavoriteRequest generates requests for DeleteUsersUseridFavorite
func NewDeleteUsersUseridFavoriteRequest(server string, userid openapi_types.UUID, params *DeleteUsersUseridFavoriteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userid", runtime.ParamLocationPath, userid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/favorite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Restaurantid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "restaurantid", runtime.ParamLocationQuery, *params.Restaurantid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersUseridFavoriteRequest generates requests for GetUsersUseridFavorite
func NewGetUsersUseridFavoriteRequest(server string, userid openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userid", runtime.ParamLocationPath, userid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/favorite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUsersUseridFavoriteRequest generates requests for PostUsersUseridFavorite
func NewPostUsersUseridFavoriteRequest(server string, userid openapi_types.UUID, params *PostUsersUseridFavoriteParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userid", runtime.ParamLocationPath, userid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/favorite", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "restaurantid", runtime.ParamLocationQuery, params.Restaurantid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAreasWithResponse request
	GetAreasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAreasResponse, error)

	// PostAreasWithBodyWithResponse request with any body
	PostAreasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAreasResponse, error)

	PostAreasWithResponse(ctx context.Context, body PostAreasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAreasResponse, error)

	// DeleteAreasAreaidWithResponse request
	DeleteAreasAreaidWithResponse(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAreasAreaidResponse, error)

	// GetAreasAreaidWithResponse request
	GetAreasAreaidWithResponse(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAreasAreaidResponse, error)

	// PatchAreasAreaidWithBodyWithResponse request with any body
	PatchAreasAreaidWithBodyWithResponse(ctx context.Context, areaid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAreasAreaidResponse, error)

	PatchAreasAreaidWithResponse(ctx context.Context, areaid openapi_types.UUID, body PatchAreasAreaidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAreasAreaidResponse, error)

	// GetEntriesWithResponse request
	GetEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEntriesResponse, error)

	// PostEntriesWithBodyWithResponse request with any body
	PostEntriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEntriesResponse, error)

	PostEntriesWithResponse(ctx context.Context, body PostEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEntriesResponse, error)

	// DeleteEntriesEntryidWithResponse request
	DeleteEntriesEntryidWithResponse(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteEntriesEntryidResponse, error)

	// GetEntriesEntryidWithResponse request
	GetEntriesEntryidWithResponse(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetEntriesEntryidResponse, error)

	// PatchEntriesEntryidWithBodyWithResponse request with any body
	PatchEntriesEntryidWithBodyWithResponse(ctx context.Context, entryid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEntriesEntryidResponse, error)

	PatchEntriesEntryidWithResponse(ctx context.Context, entryid openapi_types.UUID, body PatchEntriesEntryidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEntriesEntryidResponse, error)

	// GetGenresWithResponse request
	GetGenresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGenresResponse, error)

	// PostGenresWithBodyWithResponse request with any body
	PostGenresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGenresResponse, error)

	PostGenresWithResponse(ctx context.Context, body PostGenresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGenresResponse, error)

	// DeleteGenresGenreidWithResponse request
	DeleteGenresGenreidWithResponse(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteGenresGenreidResponse, error)

	// GetGenresGenreidWithResponse request
	GetGenresGenreidWithResponse(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetGenresGenreidResponse, error)

	// PatchGenresGenreidWithBodyWithResponse request with any body
	PatchGenresGenreidWithBodyWithResponse(ctx context.Context, genreid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGenresGenreidResponse, error)

	PatchGenresGenreidWithResponse(ctx context.Context, genreid openapi_types.UUID, body PatchGenresGenreidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGenresGenreidResponse, error)

	// GetNomikuiWithResponse request
	GetNomikuiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNomikuiResponse, error)

	// PostNomikuiWithBodyWithResponse request with any body
	PostNomikuiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNomikuiResponse, error)

	PostNomikuiWithResponse(ctx context.Context, body PostNomikuiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNomikuiResponse, error)

	// DeleteNomikuiNomikuiidWithResponse request
	DeleteNomikuiNomikuiidWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNomikuiNomikuiidResponse, error)

	// GetNomikuiNomikuiidWithResponse request
	GetNomikuiNomikuiidWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNomikuiNomikuiidResponse, error)

	// PatchNomikuiNomikuiidWithBodyWithResponse request with any body
	PatchNomikuiNomikuiidWithBodyWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchNomikuiNomikuiidResponse, error)

	PatchNomikuiNomikuiidWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, body PatchNomikuiNomikuiidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchNomikuiNomikuiidResponse, error)

	// GetPingWithResponse request
	GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error)

	// GetRestaurantsWithResponse request
	GetRestaurantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error)

	// PostRestaurantsWithBodyWithResponse request with any body
	PostRestaurantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRestaurantsResponse, error)

	PostRestaurantsWithResponse(ctx context.Context, body PostRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRestaurantsResponse, error)

	// DeleteRestaurantsRestaurantidWithResponse request
	DeleteRestaurantsRestaurantidWithResponse(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteRestaurantsRestaurantidResponse, error)

	// GetRestaurantsRestaurantidWithResponse request
	GetRestaurantsRestaurantidWithResponse(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRestaurantsRestaurantidResponse, error)

	// PatchRestaurantsRestaurantidWithBodyWithResponse request with any body
	PatchRestaurantsRestaurantidWithBodyWithResponse(ctx context.Context, restaurantid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRestaurantsRestaurantidResponse, error)

	PatchRestaurantsRestaurantidWithResponse(ctx context.Context, restaurantid openapi_types.UUID, body PatchRestaurantsRestaurantidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRestaurantsRestaurantidResponse, error)

	// GetTagsWithResponse request
	GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error)

	// PostTagsWithBodyWithResponse request with any body
	PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error)

	// DeleteTagsTagidWithResponse request
	DeleteTagsTagidWithResponse(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTagsTagidResponse, error)

	// GetTagsTagidWithResponse request
	GetTagsTagidWithResponse(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagsTagidResponse, error)

	// PatchTagsTagidWithBodyWithResponse request with any body
	PatchTagsTagidWithBodyWithResponse(ctx context.Context, tagid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagidResponse, error)

	PatchTagsTagidWithResponse(ctx context.Context, tagid openapi_types.UUID, body PatchTagsTagidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagidResponse, error)

	// GetUsersWithResponse request
	GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error)

	// PostUsersWithBodyWithResponse request with any body
	PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error)

	// DeleteUsersUseridWithResponse request
	DeleteUsersUseridWithResponse(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteUsersUseridResponse, error)

	// GetUsersUseridWithResponse request
	GetUsersUseridWithResponse(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUsersUseridResponse, error)

	// PatchUsersUseridWithBodyWithResponse request with any body
	PatchUsersUseridWithBodyWithResponse(ctx context.Context, userid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersUseridResponse, error)

	PatchUsersUseridWithResponse(ctx context.Context, userid openapi_types.UUID, body PatchUsersUseridJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersUseridResponse, error)

	// DeleteUsersUseridFavoriteWithResponse request
	DeleteUsersUseridFavoriteWithResponse(ctx context.Context, userid openapi_types.UUID, params *DeleteUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*DeleteUsersUseridFavoriteResponse, error)

	// GetUsersUseridFavoriteWithResponse request
	GetUsersUseridFavoriteWithResponse(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUsersUseridFavoriteResponse, error)

	// PostUsersUseridFavoriteWithResponse request
	PostUsersUseridFavoriteWithResponse(ctx context.Context, userid openapi_types.UUID, params *PostUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*PostUsersUseridFavoriteResponse, error)
}

type GetAreasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Area
}

// Status returns HTTPResponse.Status
func (r GetAreasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAreasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAreasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Area
}

// Status returns HTTPResponse.Status
func (r PostAreasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAreasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAreasAreaidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Area
}

// Status returns HTTPResponse.Status
func (r DeleteAreasAreaidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAreasAreaidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAreasAreaidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Area
}

// Status returns HTTPResponse.Status
func (r GetAreasAreaidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAreasAreaidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchAreasAreaidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Area
}

// Status returns HTTPResponse.Status
func (r PatchAreasAreaidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchAreasAreaidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Entry
}

// Status returns HTTPResponse.Status
func (r GetEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostEntriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Entry
}

// Status returns HTTPResponse.Status
func (r PostEntriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostEntriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEntriesEntryidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r DeleteEntriesEntryidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEntriesEntryidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEntriesEntryidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r GetEntriesEntryidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEntriesEntryidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchEntriesEntryidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Entry
}

// Status returns HTTPResponse.Status
func (r PatchEntriesEntryidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchEntriesEntryidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Genre
}

// Status returns HTTPResponse.Status
func (r GetGenresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGenresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Genre
}

// Status returns HTTPResponse.Status
func (r PostGenresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGenresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGenresGenreidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Genre
}

// Status returns HTTPResponse.Status
func (r DeleteGenresGenreidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGenresGenreidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGenresGenreidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Genre
}

// Status returns HTTPResponse.Status
func (r GetGenresGenreidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGenresGenreidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchGenresGenreidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Genre
}

// Status returns HTTPResponse.Status
func (r PatchGenresGenreidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchGenresGenreidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNomikuiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Nomikui
}

// Status returns HTTPResponse.Status
func (r GetNomikuiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNomikuiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNomikuiResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Nomikui
}

// Status returns HTTPResponse.Status
func (r PostNomikuiResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNomikuiResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNomikuiNomikuiidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Nomikui
}

// Status returns HTTPResponse.Status
func (r DeleteNomikuiNomikuiidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNomikuiNomikuiidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNomikuiNomikuiidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Nomikui
}

// Status returns HTTPResponse.Status
func (r GetNomikuiNomikuiidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNomikuiNomikuiidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchNomikuiNomikuiidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Nomikui
}

// Status returns HTTPResponse.Status
func (r PatchNomikuiNomikuiidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchNomikuiNomikuiidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetPingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRestaurantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Restaurant
}

// Status returns HTTPResponse.Status
func (r GetRestaurantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRestaurantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRestaurantsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Restaurant
}

// Status returns HTTPResponse.Status
func (r PostRestaurantsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRestaurantsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRestaurantsRestaurantidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Restaurant
}

// Status returns HTTPResponse.Status
func (r DeleteRestaurantsRestaurantidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRestaurantsRestaurantidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRestaurantsRestaurantidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Restaurant
}

// Status returns HTTPResponse.Status
func (r GetRestaurantsRestaurantidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRestaurantsRestaurantidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchRestaurantsRestaurantidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Restaurant
}

// Status returns HTTPResponse.Status
func (r PatchRestaurantsRestaurantidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchRestaurantsRestaurantidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Tag
}

// Status returns HTTPResponse.Status
func (r GetTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Tag
}

// Status returns HTTPResponse.Status
func (r PostTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTagsTagidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r DeleteTagsTagidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTagsTagidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r GetTagsTagidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchTagsTagidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Tag
}

// Status returns HTTPResponse.Status
func (r PatchTagsTagidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchTagsTagidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r PostUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersUseridResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r DeleteUsersUseridResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersUseridResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUseridResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUsersUseridResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUseridResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchUsersUseridResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PatchUsersUseridResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchUsersUseridResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsersUseridFavoriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Restaurant
}

// Status returns HTTPResponse.Status
func (r DeleteUsersUseridFavoriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsersUseridFavoriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersUseridFavoriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Restaurant
}

// Status returns HTTPResponse.Status
func (r GetUsersUseridFavoriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersUseridFavoriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUsersUseridFavoriteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Restaurant
}

// Status returns HTTPResponse.Status
func (r PostUsersUseridFavoriteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUsersUseridFavoriteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAreasWithResponse request returning *GetAreasResponse
func (c *ClientWithResponses) GetAreasWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAreasResponse, error) {
	rsp, err := c.GetAreas(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAreasResponse(rsp)
}

// PostAreasWithBodyWithResponse request with arbitrary body returning *PostAreasResponse
func (c *ClientWithResponses) PostAreasWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAreasResponse, error) {
	rsp, err := c.PostAreasWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAreasResponse(rsp)
}

func (c *ClientWithResponses) PostAreasWithResponse(ctx context.Context, body PostAreasJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAreasResponse, error) {
	rsp, err := c.PostAreas(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAreasResponse(rsp)
}

// DeleteAreasAreaidWithResponse request returning *DeleteAreasAreaidResponse
func (c *ClientWithResponses) DeleteAreasAreaidWithResponse(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAreasAreaidResponse, error) {
	rsp, err := c.DeleteAreasAreaid(ctx, areaid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAreasAreaidResponse(rsp)
}

// GetAreasAreaidWithResponse request returning *GetAreasAreaidResponse
func (c *ClientWithResponses) GetAreasAreaidWithResponse(ctx context.Context, areaid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAreasAreaidResponse, error) {
	rsp, err := c.GetAreasAreaid(ctx, areaid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAreasAreaidResponse(rsp)
}

// PatchAreasAreaidWithBodyWithResponse request with arbitrary body returning *PatchAreasAreaidResponse
func (c *ClientWithResponses) PatchAreasAreaidWithBodyWithResponse(ctx context.Context, areaid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchAreasAreaidResponse, error) {
	rsp, err := c.PatchAreasAreaidWithBody(ctx, areaid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAreasAreaidResponse(rsp)
}

func (c *ClientWithResponses) PatchAreasAreaidWithResponse(ctx context.Context, areaid openapi_types.UUID, body PatchAreasAreaidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchAreasAreaidResponse, error) {
	rsp, err := c.PatchAreasAreaid(ctx, areaid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchAreasAreaidResponse(rsp)
}

// GetEntriesWithResponse request returning *GetEntriesResponse
func (c *ClientWithResponses) GetEntriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetEntriesResponse, error) {
	rsp, err := c.GetEntries(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntriesResponse(rsp)
}

// PostEntriesWithBodyWithResponse request with arbitrary body returning *PostEntriesResponse
func (c *ClientWithResponses) PostEntriesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostEntriesResponse, error) {
	rsp, err := c.PostEntriesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEntriesResponse(rsp)
}

func (c *ClientWithResponses) PostEntriesWithResponse(ctx context.Context, body PostEntriesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostEntriesResponse, error) {
	rsp, err := c.PostEntries(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostEntriesResponse(rsp)
}

// DeleteEntriesEntryidWithResponse request returning *DeleteEntriesEntryidResponse
func (c *ClientWithResponses) DeleteEntriesEntryidWithResponse(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteEntriesEntryidResponse, error) {
	rsp, err := c.DeleteEntriesEntryid(ctx, entryid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEntriesEntryidResponse(rsp)
}

// GetEntriesEntryidWithResponse request returning *GetEntriesEntryidResponse
func (c *ClientWithResponses) GetEntriesEntryidWithResponse(ctx context.Context, entryid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetEntriesEntryidResponse, error) {
	rsp, err := c.GetEntriesEntryid(ctx, entryid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEntriesEntryidResponse(rsp)
}

// PatchEntriesEntryidWithBodyWithResponse request with arbitrary body returning *PatchEntriesEntryidResponse
func (c *ClientWithResponses) PatchEntriesEntryidWithBodyWithResponse(ctx context.Context, entryid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchEntriesEntryidResponse, error) {
	rsp, err := c.PatchEntriesEntryidWithBody(ctx, entryid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEntriesEntryidResponse(rsp)
}

func (c *ClientWithResponses) PatchEntriesEntryidWithResponse(ctx context.Context, entryid openapi_types.UUID, body PatchEntriesEntryidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchEntriesEntryidResponse, error) {
	rsp, err := c.PatchEntriesEntryid(ctx, entryid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchEntriesEntryidResponse(rsp)
}

// GetGenresWithResponse request returning *GetGenresResponse
func (c *ClientWithResponses) GetGenresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetGenresResponse, error) {
	rsp, err := c.GetGenres(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenresResponse(rsp)
}

// PostGenresWithBodyWithResponse request with arbitrary body returning *PostGenresResponse
func (c *ClientWithResponses) PostGenresWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGenresResponse, error) {
	rsp, err := c.PostGenresWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGenresResponse(rsp)
}

func (c *ClientWithResponses) PostGenresWithResponse(ctx context.Context, body PostGenresJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGenresResponse, error) {
	rsp, err := c.PostGenres(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGenresResponse(rsp)
}

// DeleteGenresGenreidWithResponse request returning *DeleteGenresGenreidResponse
func (c *ClientWithResponses) DeleteGenresGenreidWithResponse(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteGenresGenreidResponse, error) {
	rsp, err := c.DeleteGenresGenreid(ctx, genreid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGenresGenreidResponse(rsp)
}

// GetGenresGenreidWithResponse request returning *GetGenresGenreidResponse
func (c *ClientWithResponses) GetGenresGenreidWithResponse(ctx context.Context, genreid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetGenresGenreidResponse, error) {
	rsp, err := c.GetGenresGenreid(ctx, genreid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGenresGenreidResponse(rsp)
}

// PatchGenresGenreidWithBodyWithResponse request with arbitrary body returning *PatchGenresGenreidResponse
func (c *ClientWithResponses) PatchGenresGenreidWithBodyWithResponse(ctx context.Context, genreid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchGenresGenreidResponse, error) {
	rsp, err := c.PatchGenresGenreidWithBody(ctx, genreid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGenresGenreidResponse(rsp)
}

func (c *ClientWithResponses) PatchGenresGenreidWithResponse(ctx context.Context, genreid openapi_types.UUID, body PatchGenresGenreidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchGenresGenreidResponse, error) {
	rsp, err := c.PatchGenresGenreid(ctx, genreid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchGenresGenreidResponse(rsp)
}

// GetNomikuiWithResponse request returning *GetNomikuiResponse
func (c *ClientWithResponses) GetNomikuiWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNomikuiResponse, error) {
	rsp, err := c.GetNomikui(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNomikuiResponse(rsp)
}

// PostNomikuiWithBodyWithResponse request with arbitrary body returning *PostNomikuiResponse
func (c *ClientWithResponses) PostNomikuiWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNomikuiResponse, error) {
	rsp, err := c.PostNomikuiWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNomikuiResponse(rsp)
}

func (c *ClientWithResponses) PostNomikuiWithResponse(ctx context.Context, body PostNomikuiJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNomikuiResponse, error) {
	rsp, err := c.PostNomikui(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNomikuiResponse(rsp)
}

// DeleteNomikuiNomikuiidWithResponse request returning *DeleteNomikuiNomikuiidResponse
func (c *ClientWithResponses) DeleteNomikuiNomikuiidWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNomikuiNomikuiidResponse, error) {
	rsp, err := c.DeleteNomikuiNomikuiid(ctx, nomikuiid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNomikuiNomikuiidResponse(rsp)
}

// GetNomikuiNomikuiidWithResponse request returning *GetNomikuiNomikuiidResponse
func (c *ClientWithResponses) GetNomikuiNomikuiidWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNomikuiNomikuiidResponse, error) {
	rsp, err := c.GetNomikuiNomikuiid(ctx, nomikuiid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNomikuiNomikuiidResponse(rsp)
}

// PatchNomikuiNomikuiidWithBodyWithResponse request with arbitrary body returning *PatchNomikuiNomikuiidResponse
func (c *ClientWithResponses) PatchNomikuiNomikuiidWithBodyWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchNomikuiNomikuiidResponse, error) {
	rsp, err := c.PatchNomikuiNomikuiidWithBody(ctx, nomikuiid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchNomikuiNomikuiidResponse(rsp)
}

func (c *ClientWithResponses) PatchNomikuiNomikuiidWithResponse(ctx context.Context, nomikuiid openapi_types.UUID, body PatchNomikuiNomikuiidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchNomikuiNomikuiidResponse, error) {
	rsp, err := c.PatchNomikuiNomikuiid(ctx, nomikuiid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchNomikuiNomikuiidResponse(rsp)
}

// GetPingWithResponse request returning *GetPingResponse
func (c *ClientWithResponses) GetPingWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPingResponse, error) {
	rsp, err := c.GetPing(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPingResponse(rsp)
}

// GetRestaurantsWithResponse request returning *GetRestaurantsResponse
func (c *ClientWithResponses) GetRestaurantsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetRestaurantsResponse, error) {
	rsp, err := c.GetRestaurants(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantsResponse(rsp)
}

// PostRestaurantsWithBodyWithResponse request with arbitrary body returning *PostRestaurantsResponse
func (c *ClientWithResponses) PostRestaurantsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRestaurantsResponse, error) {
	rsp, err := c.PostRestaurantsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestaurantsResponse(rsp)
}

func (c *ClientWithResponses) PostRestaurantsWithResponse(ctx context.Context, body PostRestaurantsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRestaurantsResponse, error) {
	rsp, err := c.PostRestaurants(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRestaurantsResponse(rsp)
}

// DeleteRestaurantsRestaurantidWithResponse request returning *DeleteRestaurantsRestaurantidResponse
func (c *ClientWithResponses) DeleteRestaurantsRestaurantidWithResponse(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteRestaurantsRestaurantidResponse, error) {
	rsp, err := c.DeleteRestaurantsRestaurantid(ctx, restaurantid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRestaurantsRestaurantidResponse(rsp)
}

// GetRestaurantsRestaurantidWithResponse request returning *GetRestaurantsRestaurantidResponse
func (c *ClientWithResponses) GetRestaurantsRestaurantidWithResponse(ctx context.Context, restaurantid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetRestaurantsRestaurantidResponse, error) {
	rsp, err := c.GetRestaurantsRestaurantid(ctx, restaurantid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRestaurantsRestaurantidResponse(rsp)
}

// PatchRestaurantsRestaurantidWithBodyWithResponse request with arbitrary body returning *PatchRestaurantsRestaurantidResponse
func (c *ClientWithResponses) PatchRestaurantsRestaurantidWithBodyWithResponse(ctx context.Context, restaurantid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchRestaurantsRestaurantidResponse, error) {
	rsp, err := c.PatchRestaurantsRestaurantidWithBody(ctx, restaurantid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRestaurantsRestaurantidResponse(rsp)
}

func (c *ClientWithResponses) PatchRestaurantsRestaurantidWithResponse(ctx context.Context, restaurantid openapi_types.UUID, body PatchRestaurantsRestaurantidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchRestaurantsRestaurantidResponse, error) {
	rsp, err := c.PatchRestaurantsRestaurantid(ctx, restaurantid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchRestaurantsRestaurantidResponse(rsp)
}

// GetTagsWithResponse request returning *GetTagsResponse
func (c *ClientWithResponses) GetTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTagsResponse, error) {
	rsp, err := c.GetTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsResponse(rsp)
}

// PostTagsWithBodyWithResponse request with arbitrary body returning *PostTagsResponse
func (c *ClientWithResponses) PostTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

func (c *ClientWithResponses) PostTagsWithResponse(ctx context.Context, body PostTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTagsResponse, error) {
	rsp, err := c.PostTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTagsResponse(rsp)
}

// DeleteTagsTagidWithResponse request returning *DeleteTagsTagidResponse
func (c *ClientWithResponses) DeleteTagsTagidWithResponse(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTagsTagidResponse, error) {
	rsp, err := c.DeleteTagsTagid(ctx, tagid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTagsTagidResponse(rsp)
}

// GetTagsTagidWithResponse request returning *GetTagsTagidResponse
func (c *ClientWithResponses) GetTagsTagidWithResponse(ctx context.Context, tagid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTagsTagidResponse, error) {
	rsp, err := c.GetTagsTagid(ctx, tagid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagidResponse(rsp)
}

// PatchTagsTagidWithBodyWithResponse request with arbitrary body returning *PatchTagsTagidResponse
func (c *ClientWithResponses) PatchTagsTagidWithBodyWithResponse(ctx context.Context, tagid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchTagsTagidResponse, error) {
	rsp, err := c.PatchTagsTagidWithBody(ctx, tagid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagidResponse(rsp)
}

func (c *ClientWithResponses) PatchTagsTagidWithResponse(ctx context.Context, tagid openapi_types.UUID, body PatchTagsTagidJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchTagsTagidResponse, error) {
	rsp, err := c.PatchTagsTagid(ctx, tagid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchTagsTagidResponse(rsp)
}

// GetUsersWithResponse request returning *GetUsersResponse
func (c *ClientWithResponses) GetUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersResponse, error) {
	rsp, err := c.GetUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersResponse(rsp)
}

// PostUsersWithBodyWithResponse request with arbitrary body returning *PostUsersResponse
func (c *ClientWithResponses) PostUsersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

func (c *ClientWithResponses) PostUsersWithResponse(ctx context.Context, body PostUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUsersResponse, error) {
	rsp, err := c.PostUsers(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersResponse(rsp)
}

// DeleteUsersUseridWithResponse request returning *DeleteUsersUseridResponse
func (c *ClientWithResponses) DeleteUsersUseridWithResponse(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteUsersUseridResponse, error) {
	rsp, err := c.DeleteUsersUserid(ctx, userid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUseridResponse(rsp)
}

// GetUsersUseridWithResponse request returning *GetUsersUseridResponse
func (c *ClientWithResponses) GetUsersUseridWithResponse(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUsersUseridResponse, error) {
	rsp, err := c.GetUsersUserid(ctx, userid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUseridResponse(rsp)
}

// PatchUsersUseridWithBodyWithResponse request with arbitrary body returning *PatchUsersUseridResponse
func (c *ClientWithResponses) PatchUsersUseridWithBodyWithResponse(ctx context.Context, userid openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchUsersUseridResponse, error) {
	rsp, err := c.PatchUsersUseridWithBody(ctx, userid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersUseridResponse(rsp)
}

func (c *ClientWithResponses) PatchUsersUseridWithResponse(ctx context.Context, userid openapi_types.UUID, body PatchUsersUseridJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchUsersUseridResponse, error) {
	rsp, err := c.PatchUsersUserid(ctx, userid, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePatchUsersUseridResponse(rsp)
}

// DeleteUsersUseridFavoriteWithResponse request returning *DeleteUsersUseridFavoriteResponse
func (c *ClientWithResponses) DeleteUsersUseridFavoriteWithResponse(ctx context.Context, userid openapi_types.UUID, params *DeleteUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*DeleteUsersUseridFavoriteResponse, error) {
	rsp, err := c.DeleteUsersUseridFavorite(ctx, userid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsersUseridFavoriteResponse(rsp)
}

// GetUsersUseridFavoriteWithResponse request returning *GetUsersUseridFavoriteResponse
func (c *ClientWithResponses) GetUsersUseridFavoriteWithResponse(ctx context.Context, userid openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetUsersUseridFavoriteResponse, error) {
	rsp, err := c.GetUsersUseridFavorite(ctx, userid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersUseridFavoriteResponse(rsp)
}

// PostUsersUseridFavoriteWithResponse request returning *PostUsersUseridFavoriteResponse
func (c *ClientWithResponses) PostUsersUseridFavoriteWithResponse(ctx context.Context, userid openapi_types.UUID, params *PostUsersUseridFavoriteParams, reqEditors ...RequestEditorFn) (*PostUsersUseridFavoriteResponse, error) {
	rsp, err := c.PostUsersUseridFavorite(ctx, userid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUsersUseridFavoriteResponse(rsp)
}

// ParseGetAreasResponse parses an HTTP response from a GetAreasWithResponse call
func ParseGetAreasResponse(rsp *http.Response) (*GetAreasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAreasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Area
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAreasResponse parses an HTTP response from a PostAreasWithResponse call
func ParsePostAreasResponse(rsp *http.Response) (*PostAreasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAreasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Area
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteAreasAreaidResponse parses an HTTP response from a DeleteAreasAreaidWithResponse call
func ParseDeleteAreasAreaidResponse(rsp *http.Response) (*DeleteAreasAreaidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAreasAreaidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Area
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAreasAreaidResponse parses an HTTP response from a GetAreasAreaidWithResponse call
func ParseGetAreasAreaidResponse(rsp *http.Response) (*GetAreasAreaidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAreasAreaidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Area
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchAreasAreaidResponse parses an HTTP response from a PatchAreasAreaidWithResponse call
func ParsePatchAreasAreaidResponse(rsp *http.Response) (*PatchAreasAreaidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchAreasAreaidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Area
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEntriesResponse parses an HTTP response from a GetEntriesWithResponse call
func ParseGetEntriesResponse(rsp *http.Response) (*GetEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostEntriesResponse parses an HTTP response from a PostEntriesWithResponse call
func ParsePostEntriesResponse(rsp *http.Response) (*PostEntriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostEntriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEntriesEntryidResponse parses an HTTP response from a DeleteEntriesEntryidWithResponse call
func ParseDeleteEntriesEntryidResponse(rsp *http.Response) (*DeleteEntriesEntryidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEntriesEntryidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetEntriesEntryidResponse parses an HTTP response from a GetEntriesEntryidWithResponse call
func ParseGetEntriesEntryidResponse(rsp *http.Response) (*GetEntriesEntryidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEntriesEntryidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchEntriesEntryidResponse parses an HTTP response from a PatchEntriesEntryidWithResponse call
func ParsePatchEntriesEntryidResponse(rsp *http.Response) (*PatchEntriesEntryidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchEntriesEntryidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Entry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGenresResponse parses an HTTP response from a GetGenresWithResponse call
func ParseGetGenresResponse(rsp *http.Response) (*GetGenresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Genre
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostGenresResponse parses an HTTP response from a PostGenresWithResponse call
func ParsePostGenresResponse(rsp *http.Response) (*PostGenresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGenresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Genre
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteGenresGenreidResponse parses an HTTP response from a DeleteGenresGenreidWithResponse call
func ParseDeleteGenresGenreidResponse(rsp *http.Response) (*DeleteGenresGenreidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGenresGenreidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Genre
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetGenresGenreidResponse parses an HTTP response from a GetGenresGenreidWithResponse call
func ParseGetGenresGenreidResponse(rsp *http.Response) (*GetGenresGenreidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGenresGenreidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Genre
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchGenresGenreidResponse parses an HTTP response from a PatchGenresGenreidWithResponse call
func ParsePatchGenresGenreidResponse(rsp *http.Response) (*PatchGenresGenreidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchGenresGenreidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Genre
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNomikuiResponse parses an HTTP response from a GetNomikuiWithResponse call
func ParseGetNomikuiResponse(rsp *http.Response) (*GetNomikuiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNomikuiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Nomikui
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostNomikuiResponse parses an HTTP response from a PostNomikuiWithResponse call
func ParsePostNomikuiResponse(rsp *http.Response) (*PostNomikuiResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNomikuiResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Nomikui
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteNomikuiNomikuiidResponse parses an HTTP response from a DeleteNomikuiNomikuiidWithResponse call
func ParseDeleteNomikuiNomikuiidResponse(rsp *http.Response) (*DeleteNomikuiNomikuiidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNomikuiNomikuiidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nomikui
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetNomikuiNomikuiidResponse parses an HTTP response from a GetNomikuiNomikuiidWithResponse call
func ParseGetNomikuiNomikuiidResponse(rsp *http.Response) (*GetNomikuiNomikuiidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNomikuiNomikuiidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nomikui
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchNomikuiNomikuiidResponse parses an HTTP response from a PatchNomikuiNomikuiidWithResponse call
func ParsePatchNomikuiNomikuiidResponse(rsp *http.Response) (*PatchNomikuiNomikuiidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchNomikuiNomikuiidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Nomikui
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPingResponse parses an HTTP response from a GetPingWithResponse call
func ParseGetPingResponse(rsp *http.Response) (*GetPingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRestaurantsResponse parses an HTTP response from a GetRestaurantsWithResponse call
func ParseGetRestaurantsResponse(rsp *http.Response) (*GetRestaurantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRestaurantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostRestaurantsResponse parses an HTTP response from a PostRestaurantsWithResponse call
func ParsePostRestaurantsResponse(rsp *http.Response) (*PostRestaurantsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRestaurantsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteRestaurantsRestaurantidResponse parses an HTTP response from a DeleteRestaurantsRestaurantidWithResponse call
func ParseDeleteRestaurantsRestaurantidResponse(rsp *http.Response) (*DeleteRestaurantsRestaurantidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRestaurantsRestaurantidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetRestaurantsRestaurantidResponse parses an HTTP response from a GetRestaurantsRestaurantidWithResponse call
func ParseGetRestaurantsRestaurantidResponse(rsp *http.Response) (*GetRestaurantsRestaurantidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRestaurantsRestaurantidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchRestaurantsRestaurantidResponse parses an HTTP response from a PatchRestaurantsRestaurantidWithResponse call
func ParsePatchRestaurantsRestaurantidResponse(rsp *http.Response) (*PatchRestaurantsRestaurantidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchRestaurantsRestaurantidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagsResponse parses an HTTP response from a GetTagsWithResponse call
func ParseGetTagsResponse(rsp *http.Response) (*GetTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostTagsResponse parses an HTTP response from a PostTagsWithResponse call
func ParsePostTagsResponse(rsp *http.Response) (*PostTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteTagsTagidResponse parses an HTTP response from a DeleteTagsTagidWithResponse call
func ParseDeleteTagsTagidResponse(rsp *http.Response) (*DeleteTagsTagidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTagsTagidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTagsTagidResponse parses an HTTP response from a GetTagsTagidWithResponse call
func ParseGetTagsTagidResponse(rsp *http.Response) (*GetTagsTagidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchTagsTagidResponse parses an HTTP response from a PatchTagsTagidWithResponse call
func ParsePatchTagsTagidResponse(rsp *http.Response) (*PatchTagsTagidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchTagsTagidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Tag
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersResponse parses an HTTP response from a GetUsersWithResponse call
func ParseGetUsersResponse(rsp *http.Response) (*GetUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersResponse parses an HTTP response from a PostUsersWithResponse call
func ParsePostUsersResponse(rsp *http.Response) (*PostUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUsersUseridResponse parses an HTTP response from a DeleteUsersUseridWithResponse call
func ParseDeleteUsersUseridResponse(rsp *http.Response) (*DeleteUsersUseridResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersUseridResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUseridResponse parses an HTTP response from a GetUsersUseridWithResponse call
func ParseGetUsersUseridResponse(rsp *http.Response) (*GetUsersUseridResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUseridResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchUsersUseridResponse parses an HTTP response from a PatchUsersUseridWithResponse call
func ParsePatchUsersUseridResponse(rsp *http.Response) (*PatchUsersUseridResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchUsersUseridResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteUsersUseridFavoriteResponse parses an HTTP response from a DeleteUsersUseridFavoriteWithResponse call
func ParseDeleteUsersUseridFavoriteResponse(rsp *http.Response) (*DeleteUsersUseridFavoriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsersUseridFavoriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUsersUseridFavoriteResponse parses an HTTP response from a GetUsersUseridFavoriteWithResponse call
func ParseGetUsersUseridFavoriteResponse(rsp *http.Response) (*GetUsersUseridFavoriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersUseridFavoriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostUsersUseridFavoriteResponse parses an HTTP response from a PostUsersUseridFavoriteWithResponse call
func ParsePostUsersUseridFavoriteResponse(rsp *http.Response) (*PostUsersUseridFavoriteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUsersUseridFavoriteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Restaurant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 全エリアの取得
	// (GET /areas)
	GetAreas(ctx echo.Context) error
	// 新規エリア登録
	// (POST /areas)
	PostAreas(ctx echo.Context) error
	// 指定area削除
	// (DELETE /areas/{areaid})
	DeleteAreasAreaid(ctx echo.Context, areaid openapi_types.UUID) error
	// 指定areaの取得
	// (GET /areas/{areaid})
	GetAreasAreaid(ctx echo.Context, areaid openapi_types.UUID) error
	// 指定area情報編集
	// (PATCH /areas/{areaid})
	PatchAreasAreaid(ctx echo.Context, areaid openapi_types.UUID) error
	// 全エントリの取得
	// (GET /entries)
	GetEntries(ctx echo.Context) error
	// 新規エントリ登録
	// (POST /entries)
	PostEntries(ctx echo.Context) error
	// 指定entry削除
	// (DELETE /entries/{entryid})
	DeleteEntriesEntryid(ctx echo.Context, entryid openapi_types.UUID) error
	// 指定entrieの取得
	// (GET /entries/{entryid})
	GetEntriesEntryid(ctx echo.Context, entryid openapi_types.UUID) error
	// 指定entrie情報編集
	// (PATCH /entries/{entryid})
	PatchEntriesEntryid(ctx echo.Context, entryid openapi_types.UUID) error
	// 全ジャンルの取得
	// (GET /genres)
	GetGenres(ctx echo.Context) error
	// 新規ジャンル登録
	// (POST /genres)
	PostGenres(ctx echo.Context) error
	// 指定genre削除
	// (DELETE /genres/{genreid})
	DeleteGenresGenreid(ctx echo.Context, genreid openapi_types.UUID) error
	// 指定genreの取得
	// (GET /genres/{genreid})
	GetGenresGenreid(ctx echo.Context, genreid openapi_types.UUID) error
	// 指定genre情報編集
	// (PATCH /genres/{genreid})
	PatchGenresGenreid(ctx echo.Context, genreid openapi_types.UUID) error
	// 全nomikuiの取得
	// (GET /nomikui)
	GetNomikui(ctx echo.Context) error
	// 新規nomikui登録
	// (POST /nomikui)
	PostNomikui(ctx echo.Context) error
	// 指定nomikui削除
	// (DELETE /nomikui/{nomikuiid})
	DeleteNomikuiNomikuiid(ctx echo.Context, nomikuiid openapi_types.UUID) error
	// 指定nomikuiの取得
	// (GET /nomikui/{nomikuiid})
	GetNomikuiNomikuiid(ctx echo.Context, nomikuiid openapi_types.UUID) error
	// 指定nomikui情報編集
	// (PATCH /nomikui/{nomikuiid})
	PatchNomikuiNomikuiid(ctx echo.Context, nomikuiid openapi_types.UUID) error
	// pong
	// (GET /ping)
	GetPing(ctx echo.Context) error
	// 全登録店の取得
	// (GET /restaurants)
	GetRestaurants(ctx echo.Context) error
	// 新規店登録
	// (POST /restaurants)
	PostRestaurants(ctx echo.Context) error
	// 指定店削除
	// (DELETE /restaurants/{restaurantid})
	DeleteRestaurantsRestaurantid(ctx echo.Context, restaurantid openapi_types.UUID) error
	// 指定店の取得
	// (GET /restaurants/{restaurantid})
	GetRestaurantsRestaurantid(ctx echo.Context, restaurantid openapi_types.UUID) error
	// 指定店情報編集
	// (PATCH /restaurants/{restaurantid})
	PatchRestaurantsRestaurantid(ctx echo.Context, restaurantid openapi_types.UUID) error
	// 全タグの取得
	// (GET /tags)
	GetTags(ctx echo.Context) error
	// 新規タグ登録
	// (POST /tags)
	PostTags(ctx echo.Context) error
	// 指定tag削除
	// (DELETE /tags/{tagid})
	DeleteTagsTagid(ctx echo.Context, tagid openapi_types.UUID) error
	// 指定tagの取得
	// (GET /tags/{tagid})
	GetTagsTagid(ctx echo.Context, tagid openapi_types.UUID) error
	// 指定tag情報編集
	// (PATCH /tags/{tagid})
	PatchTagsTagid(ctx echo.Context, tagid openapi_types.UUID) error
	// 全ユーザの取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// 新規ユーザ登録
	// (POST /users)
	PostUsers(ctx echo.Context) error
	// 指定ユーザ削除
	// (DELETE /users/{userid})
	DeleteUsersUserid(ctx echo.Context, userid openapi_types.UUID) error
	// 指定ユーザの取得
	// (GET /users/{userid})
	GetUsersUserid(ctx echo.Context, userid openapi_types.UUID) error
	// 指定ユーザ情報編集
	// (PATCH /users/{userid})
	PatchUsersUserid(ctx echo.Context, userid openapi_types.UUID) error
	// お気に入りの削除
	// (DELETE /users/{userid}/favorite)
	DeleteUsersUseridFavorite(ctx echo.Context, userid openapi_types.UUID, params DeleteUsersUseridFavoriteParams) error
	// お気に入り店の取得
	// (GET /users/{userid}/favorite)
	GetUsersUseridFavorite(ctx echo.Context, userid openapi_types.UUID) error
	// お気に入りの追加
	// (POST /users/{userid}/favorite)
	PostUsersUseridFavorite(ctx echo.Context, userid openapi_types.UUID, params PostUsersUseridFavoriteParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAreas converts echo context to params.
func (w *ServerInterfaceWrapper) GetAreas(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAreas(ctx)
	return err
}

// PostAreas converts echo context to params.
func (w *ServerInterfaceWrapper) PostAreas(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAreas(ctx)
	return err
}

// DeleteAreasAreaid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAreasAreaid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "areaid" -------------
	var areaid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaid", ctx.Param("areaid"), &areaid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter areaid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAreasAreaid(ctx, areaid)
	return err
}

// GetAreasAreaid converts echo context to params.
func (w *ServerInterfaceWrapper) GetAreasAreaid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "areaid" -------------
	var areaid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaid", ctx.Param("areaid"), &areaid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter areaid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAreasAreaid(ctx, areaid)
	return err
}

// PatchAreasAreaid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAreasAreaid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "areaid" -------------
	var areaid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "areaid", ctx.Param("areaid"), &areaid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter areaid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchAreasAreaid(ctx, areaid)
	return err
}

// GetEntries converts echo context to params.
func (w *ServerInterfaceWrapper) GetEntries(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEntries(ctx)
	return err
}

// PostEntries converts echo context to params.
func (w *ServerInterfaceWrapper) PostEntries(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEntries(ctx)
	return err
}

// DeleteEntriesEntryid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteEntriesEntryid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entryid" -------------
	var entryid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "entryid", ctx.Param("entryid"), &entryid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entryid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteEntriesEntryid(ctx, entryid)
	return err
}

// GetEntriesEntryid converts echo context to params.
func (w *ServerInterfaceWrapper) GetEntriesEntryid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entryid" -------------
	var entryid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "entryid", ctx.Param("entryid"), &entryid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entryid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEntriesEntryid(ctx, entryid)
	return err
}

// PatchEntriesEntryid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchEntriesEntryid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "entryid" -------------
	var entryid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "entryid", ctx.Param("entryid"), &entryid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entryid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchEntriesEntryid(ctx, entryid)
	return err
}

// GetGenres converts echo context to params.
func (w *ServerInterfaceWrapper) GetGenres(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGenres(ctx)
	return err
}

// PostGenres converts echo context to params.
func (w *ServerInterfaceWrapper) PostGenres(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostGenres(ctx)
	return err
}

// DeleteGenresGenreid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGenresGenreid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "genreid" -------------
	var genreid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "genreid", ctx.Param("genreid"), &genreid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter genreid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteGenresGenreid(ctx, genreid)
	return err
}

// GetGenresGenreid converts echo context to params.
func (w *ServerInterfaceWrapper) GetGenresGenreid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "genreid" -------------
	var genreid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "genreid", ctx.Param("genreid"), &genreid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter genreid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetGenresGenreid(ctx, genreid)
	return err
}

// PatchGenresGenreid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGenresGenreid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "genreid" -------------
	var genreid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "genreid", ctx.Param("genreid"), &genreid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter genreid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchGenresGenreid(ctx, genreid)
	return err
}

// GetNomikui converts echo context to params.
func (w *ServerInterfaceWrapper) GetNomikui(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNomikui(ctx)
	return err
}

// PostNomikui converts echo context to params.
func (w *ServerInterfaceWrapper) PostNomikui(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostNomikui(ctx)
	return err
}

// DeleteNomikuiNomikuiid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteNomikuiNomikuiid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nomikuiid" -------------
	var nomikuiid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "nomikuiid", ctx.Param("nomikuiid"), &nomikuiid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nomikuiid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteNomikuiNomikuiid(ctx, nomikuiid)
	return err
}

// GetNomikuiNomikuiid converts echo context to params.
func (w *ServerInterfaceWrapper) GetNomikuiNomikuiid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nomikuiid" -------------
	var nomikuiid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "nomikuiid", ctx.Param("nomikuiid"), &nomikuiid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nomikuiid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNomikuiNomikuiid(ctx, nomikuiid)
	return err
}

// PatchNomikuiNomikuiid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchNomikuiNomikuiid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "nomikuiid" -------------
	var nomikuiid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "nomikuiid", ctx.Param("nomikuiid"), &nomikuiid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter nomikuiid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchNomikuiNomikuiid(ctx, nomikuiid)
	return err
}

// GetPing converts echo context to params.
func (w *ServerInterfaceWrapper) GetPing(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPing(ctx)
	return err
}

// GetRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRestaurants(ctx)
	return err
}

// PostRestaurants converts echo context to params.
func (w *ServerInterfaceWrapper) PostRestaurants(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRestaurants(ctx)
	return err
}

// DeleteRestaurantsRestaurantid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRestaurantsRestaurantid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "restaurantid" -------------
	var restaurantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "restaurantid", ctx.Param("restaurantid"), &restaurantid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurantid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRestaurantsRestaurantid(ctx, restaurantid)
	return err
}

// GetRestaurantsRestaurantid converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestaurantsRestaurantid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "restaurantid" -------------
	var restaurantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "restaurantid", ctx.Param("restaurantid"), &restaurantid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurantid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRestaurantsRestaurantid(ctx, restaurantid)
	return err
}

// PatchRestaurantsRestaurantid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRestaurantsRestaurantid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "restaurantid" -------------
	var restaurantid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "restaurantid", ctx.Param("restaurantid"), &restaurantid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurantid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchRestaurantsRestaurantid(ctx, restaurantid)
	return err
}

// GetTags converts echo context to params.
func (w *ServerInterfaceWrapper) GetTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTags(ctx)
	return err
}

// PostTags converts echo context to params.
func (w *ServerInterfaceWrapper) PostTags(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTags(ctx)
	return err
}

// DeleteTagsTagid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTagsTagid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagid" -------------
	var tagid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagid", ctx.Param("tagid"), &tagid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTagsTagid(ctx, tagid)
	return err
}

// GetTagsTagid converts echo context to params.
func (w *ServerInterfaceWrapper) GetTagsTagid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagid" -------------
	var tagid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagid", ctx.Param("tagid"), &tagid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTagsTagid(ctx, tagid)
	return err
}

// PatchTagsTagid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTagsTagid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "tagid" -------------
	var tagid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "tagid", ctx.Param("tagid"), &tagid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tagid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTagsTagid(ctx, tagid)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// PostUsers converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsers(ctx)
	return err
}

// DeleteUsersUserid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUserid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userid" -------------
	var userid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userid", ctx.Param("userid"), &userid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUserid(ctx, userid)
	return err
}

// GetUsersUserid converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userid" -------------
	var userid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userid", ctx.Param("userid"), &userid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUserid(ctx, userid)
	return err
}

// PatchUsersUserid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userid" -------------
	var userid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userid", ctx.Param("userid"), &userid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchUsersUserid(ctx, userid)
	return err
}

// DeleteUsersUseridFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsersUseridFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userid" -------------
	var userid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userid", ctx.Param("userid"), &userid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteUsersUseridFavoriteParams
	// ------------- Optional query parameter "restaurantid" -------------

	err = runtime.BindQueryParameter("form", true, false, "restaurantid", ctx.QueryParams(), &params.Restaurantid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurantid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUsersUseridFavorite(ctx, userid, params)
	return err
}

// GetUsersUseridFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUseridFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userid" -------------
	var userid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userid", ctx.Param("userid"), &userid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUsersUseridFavorite(ctx, userid)
	return err
}

// PostUsersUseridFavorite converts echo context to params.
func (w *ServerInterfaceWrapper) PostUsersUseridFavorite(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userid" -------------
	var userid openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userid", ctx.Param("userid"), &userid, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params PostUsersUseridFavoriteParams
	// ------------- Required query parameter "restaurantid" -------------

	err = runtime.BindQueryParameter("form", true, true, "restaurantid", ctx.QueryParams(), &params.Restaurantid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restaurantid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostUsersUseridFavorite(ctx, userid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/areas", wrapper.GetAreas)
	router.POST(baseURL+"/areas", wrapper.PostAreas)
	router.DELETE(baseURL+"/areas/:areaid", wrapper.DeleteAreasAreaid)
	router.GET(baseURL+"/areas/:areaid", wrapper.GetAreasAreaid)
	router.PATCH(baseURL+"/areas/:areaid", wrapper.PatchAreasAreaid)
	router.GET(baseURL+"/entries", wrapper.GetEntries)
	router.POST(baseURL+"/entries", wrapper.PostEntries)
	router.DELETE(baseURL+"/entries/:entryid", wrapper.DeleteEntriesEntryid)
	router.GET(baseURL+"/entries/:entryid", wrapper.GetEntriesEntryid)
	router.PATCH(baseURL+"/entries/:entryid", wrapper.PatchEntriesEntryid)
	router.GET(baseURL+"/genres", wrapper.GetGenres)
	router.POST(baseURL+"/genres", wrapper.PostGenres)
	router.DELETE(baseURL+"/genres/:genreid", wrapper.DeleteGenresGenreid)
	router.GET(baseURL+"/genres/:genreid", wrapper.GetGenresGenreid)
	router.PATCH(baseURL+"/genres/:genreid", wrapper.PatchGenresGenreid)
	router.GET(baseURL+"/nomikui", wrapper.GetNomikui)
	router.POST(baseURL+"/nomikui", wrapper.PostNomikui)
	router.DELETE(baseURL+"/nomikui/:nomikuiid", wrapper.DeleteNomikuiNomikuiid)
	router.GET(baseURL+"/nomikui/:nomikuiid", wrapper.GetNomikuiNomikuiid)
	router.PATCH(baseURL+"/nomikui/:nomikuiid", wrapper.PatchNomikuiNomikuiid)
	router.GET(baseURL+"/ping", wrapper.GetPing)
	router.GET(baseURL+"/restaurants", wrapper.GetRestaurants)
	router.POST(baseURL+"/restaurants", wrapper.PostRestaurants)
	router.DELETE(baseURL+"/restaurants/:restaurantid", wrapper.DeleteRestaurantsRestaurantid)
	router.GET(baseURL+"/restaurants/:restaurantid", wrapper.GetRestaurantsRestaurantid)
	router.PATCH(baseURL+"/restaurants/:restaurantid", wrapper.PatchRestaurantsRestaurantid)
	router.GET(baseURL+"/tags", wrapper.GetTags)
	router.POST(baseURL+"/tags", wrapper.PostTags)
	router.DELETE(baseURL+"/tags/:tagid", wrapper.DeleteTagsTagid)
	router.GET(baseURL+"/tags/:tagid", wrapper.GetTagsTagid)
	router.PATCH(baseURL+"/tags/:tagid", wrapper.PatchTagsTagid)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.POST(baseURL+"/users", wrapper.PostUsers)
	router.DELETE(baseURL+"/users/:userid", wrapper.DeleteUsersUserid)
	router.GET(baseURL+"/users/:userid", wrapper.GetUsersUserid)
	router.PATCH(baseURL+"/users/:userid", wrapper.PatchUsersUserid)
	router.DELETE(baseURL+"/users/:userid/favorite", wrapper.DeleteUsersUseridFavorite)
	router.GET(baseURL+"/users/:userid/favorite", wrapper.GetUsersUseridFavorite)
	router.POST(baseURL+"/users/:userid/favorite", wrapper.PostUsersUseridFavorite)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcb2/bxh3+KsRtLzZAMdU1Awq987osy9b8Weq8KozhKp0lJiKPPh6zuoKAWWqyNOua",
	"5E2ENhjWNVuXLVjqLEA7OF3yYTgm9rco7o5/xSNFyxR1sfPKMvk73u/uee75PSJPHIA2Nm1sIYs6oDUA",
	"TruHTMg/rhIE2V+bYBsRaiB+FBIELWgi9hl9AE27j0ALeKMH3vhf3uhL//afQAPQLZsddSgxrC4YNoDR",
	"YfEbmJiQghZwXaOTDRs2AEGbrkFQB7Tei3tajyLx+5dRm7ILnrIo2cpmhyxKDNT5Lesl0V8HUnSCGiaS",
	"5ubYBDnI4k2Cs+9j3EfQYqctbBpXXKPUCBrAdRCZZ7BBu2R3ycwayZHJ5uM0sgjKzkeXHZbB9V9vfN8b",
	"P/HGDytELO5NluI5MbJskm1smsH0J1IcT7zxv1mio394o6+98Y1gZv7/3eeyfNvY6rhtelDsy6FqONhG",
	"lpwfmHShZXxYEvYGsI02dQVWcSwxZKEEORS6BFp0HjRSrdN5Tk1XNEAZbBejy8jFoOSwpSDv7z71/3l9",
	"7/H1vWu3ve1HL5996t954m1PvO2PvPHH3ujh/v2/eNsf+bfveNt3vO1H/u5Edm3Ou7JQlgvLrhn/3j3/",
	"2z/7j//o39o5NK5dw6GIHIisU+jyBKcvJcNvDXZlS86i2SU3eu6Ndg6jBxVTNsxSNqxLDiLZcc2NLuxT",
	"RGShlMDfiKumgk+ckIXLMMomz8IMawOzi3aQ0yaGTQ1sgRY4zz/Avma6fWr0DQtpmGiOYXX76AT/NxGv",
	"GZb23tvYNLF1FpIr6z/qUWq3dL3ND5mQXFnBpKv3UN/Wf8yu88u1s++ssKQNyofBBHlTW71wBjTAVUQc",
	"kUNz5Y2VJhc2G1nQNkALvLnSXGmCBrAh7fFp1tnCDwoMJxHDALKkznRAC5xGdJUHcD7Y2HIEOj9pNqfI",
	"B227b7R5S/2yg63YgnA0KTJ5wx8StAFa4Ad6bFb0wKno3KYMo0mGhMAtMcfpuV3VfvXu+XMaP6/hDY0N",
	"QROQOKz9yeabWUDOYapBl/YwMT5EHRb2UzGGdNgZiyLCcHMQuYqIhgjBBPAUNqDbp9kWlyz0gY2YAGun",
	"RPCwARzXNCGzNcC/9iCyVEz3bt31n3Hpg10n9EYOWGeygx0JAhewk4Bg00UO/RnubB1o9mdPeprvlLho",
	"mEH8jQX0mZ7KtwmCFGlQs9DvOKrKofni7s7eV7ciQF9+9nT/k/9I0Bw2gpWlD0RlHYqu+oiiLMY/58c5",
	"yquiDrMVSqCJKCLsutNZwjDKYP+xxQxCKYzPpfFsJLCZJeXrh1zt82DvuO02cpwNt9/f0sREdQ4A/8nm",
	"yWzYu267J9TBcDQLU20Du1adbPnkD/6jz1kC/sc39z/7m3TZF+rusaVDQtOPDgtm6D+k7Z6kALDDipFh",
	"mWWoZilybebkj5AUvRhf8794/PLbB/v3rudULnGHotAVngpC6vCF4g7RHMYwGIfy3vCJN77BDIVEHkIo",
	"ig1iEo3q12Yw//V6xESnBSZRTI/KNjHANuMUY2ATK04fsA9bpexigPkp0WBWVUBRmKQsxCfVNAm5XFiY",
	"aeQzslSp5hlkbGNSDmZI87EmhpinKg1kcMVlU8JAM6tEgY1UkRpLrVd1a1SVblINjTJQjqFMFzh+Y7/Q",
	"UZ4WEXUYSvGIbQ5DyUehtp2MHwfKhCKAodhNJpCofnEGc1+vmUx0WmAmuyEtlPSSMbAZLxmhGq80fRA8",
	"SivhJAXep4NHbzOKQjcKkxSF+KSafiGXBwszkkIxlinSPIOMkUwIQbEgH2taJPX+KNFhVmkosJAKsmKp",
	"RapucarSQSrCxhwDmapqVrzlKE+vwl1JdTjIsK85PGQwEpVdZJCiTCVCHIodZBKK6ldnNPn1mshUtwU2",
	"0oq5oaCRDLLLeMgY2MRy0wfRJsYSPjKYoHOJfY+F1SG1QTJbH5Kn1fQNBYxYmKEM5WOZqh3kkDGVSXGY",
	"odKvSRInX6XBVIgeM8tHgctUlyVLLmf1i1eVhlMhduaYznQZtBnwBZbzAjt/SIzizag25lebpl0xPHaw",
	"u1Upq8FHwmcw3gdcePP3YiKsDv+e2Ao/h4WPB6WyixcWz9+dyIQ4HsIMKz+NTPX6l8SiXkc/3XOBqScp",
	"wijo6/3dScbTp0CeWo36ILlFv4S7TxDhYnpzf5nK7O9O8orz1E8F1HRxxVRZmNtPKM0ya6a/O8mY/SkF",
	"KaHsr2kzNciL03XkiHGmTOEp+BLwilBn+RVxKTJX5fcCdSib87UgU0nFiXxDu8bO1+Fk12B3HgtLYVft",
	"fQzPvdGOTD/432LLGs199SuTz3a9JjXqssCdUthVdt8CAzLjTAMUw5WkDyjslnKhDNs1FjurCtAgSCL/",
	"4Sk1LUMO3guzmEwJlim6FHYz3jJa5EXyeixpEOv2UQG/WOQL7KFCHFhioalXeKo0fQpwL8ftJaqT63BO",
	"5Ru9SzygDqfH35Mwh9VjQ1Da642/8sbfeaNvZEog5r/Y78UQVL8OxaTX6/jiPgssnxuwQUXPFwKasX0h",
	"mtHK0gfidUklnB9H+VL4cqUydwCiPPLUP3pVk5oWII8HC7OCXCmWKckRYhlHGOtAoRC/5geb6ljwjxgt",
	"ZlSIArOoMDuWWbRqFqsq7aM6rMxxkfnFTt+AVzExRK0rXfV+ETZSh7+N6b5ffHPD//Sp//Wzvcd/FW95",
	"i3vfdBHZyr0JX5+kLmCDwPlfV0dpTJK3w5fEcG/75oudibf90L/2d290k0F5qIqsIHePOI2U4E3OM8DS",
	"X+peHeHbe/4//+YX8wjfq/jg+hjonQBUVs5ZQ96tjINnoWEFWYEGcEkftECPUttp6XxT/eYKJdBeuWzr",
	"0DZAlkfv4DbsaxQ5VHaVlq73WUAPO7T1VvOtJmAkCDKcvlS0Dvbvfrn/+/vi7ZCJJeBIuvd3J5Lo1Oan",
	"nFUnaRb/ECKTGn8qJGnChyKLj3/9KmkV/FJI1i54UZ+kkXjhUe54ki9vkbQOf90+XB9+HwAA//9wH4JZ",
	"eVsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
